image:
  name: hashicorp/terraform
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  TF_ROOT: ${CI_PROJECT_DIR} # The relative path to the root directory of the Terraform project
  TF_STATE_NAME: default # The name of the state file used by the GitLab Managed Terraform state backend

stages:
  - validate
  - test
  - build
  - deploy
  - cleanup

cache:
  key: '${TF_ROOT}'
  paths:
    - ${TF_ROOT}/.terraform/

before_script:
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - terraform init
  - terraform workspace select $CI_COMMIT_REF_NAME

terraform:fmt: &terraform_fmt
  stage: validate
  script:
    - cd ${TF_ROOT}
    - terraform fmt
  allow_failure: true

terraform:validate: &terraform_validate
  stage: validate
  script:
    - cd "${TF_ROOT}"
    - terraform validate

terraform:build: &terraform_build
  stage: build
  script:
    - cd "${TF_ROOT}"
    - terraform plan -out planfile
    - terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
      - planfile
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform:deploy: &terraform_deploy
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - terraform apply -input=false "planfile"
  resource_group: ${TF_STATE_NAME}
  dependencies:
    - terrafrom:build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

terraform:destroy: &terraform_destroy
  stage: cleanup
  script:
    - cd "${TF_ROOT}"
    - terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual
